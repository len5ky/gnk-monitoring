server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: ${LOKI_URL}

scrape_configs:
  - job_name: docker
    pipeline_stages:
      - docker: {}
      - replace:
          expression: '\x1b\[[0-9;]*[mK]'
          replace: ''
      - match:
          selector: '{compose_service="node"}'
          stages:
            - regex:
                expression: '(?i)(?:\x1b\[[0-9;]*m)*\s*(?P<raw_level>trace|debug|dbg|info|inf|warn|warning|wrn|error|err|critical|crit|crt)\b'
            - template:
                source: level
                template: '{{- if .raw_level -}}{{- $l := (lower .raw_level) -}}{{- if eq $l "inf" -}}info{{- else if or (eq $l "warn") (eq $l "wrn") (eq $l "warning") -}}warning{{- else if or (eq $l "err") (eq $l "error") -}}error{{- else if or (eq $l "crit") (eq $l "critical") (eq $l "crt") -}}critical{{- else if or (eq $l "dbg") (eq $l "debug") -}}debug{{- else if eq $l "trace" -}}trace{{- else -}}{{ $l }}{{- end -}}{{- else -}}unknown{{- end -}}'
            - labels:
                level:
      - match:
          selector: '{compose_service=~"connectivity-checker|hub-poller|vesting-poller"}'
          stages:
            - json:
                expressions:
                  kind: kind
                  status: status
                  instance_id: instance_id
                  instance_role: instance_role
                  node: node
                  name: name
                  level: level
            - labels:
                kind:
                status:
                instance_id:
                instance_role:
                node:
                name:
                level:
      - match:
          selector: '{compose_service=~"api|proxy"}'
          stages:
            - regex:
                expression: '(?i)\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2} (?P<raw_level>TRACE|DEBUG|INFO|WARN|WARNING|ERROR|CRITICAL|FATAL)\b'
            - template:
                source: level
                template: '{{ if .raw_level }}{{ .raw_level | lower }}{{ else }}unknown{{ end }}'
            - labels:
                level:
      - regex:
          expression: '(?P<is_health_check>GET .*?/(?:health|state)\s+HTTP)'
      - template:
          source: health_check
          template: '{{ if .is_health_check }}true{{ else }}false{{ end }}'
      - labels:
          health_check:
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '.+'
        action: keep
      - source_labels: ['__meta_docker_container_id']
        target_label: '__path__'
        replacement: /var/lib/docker/containers/$1/$1-json.log
      - source_labels: ['__meta_docker_container_name']
        target_label: 'container'
        regex: '/(.*)'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'compose_project'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'compose_service'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'log_stream'
      - replacement: 'docker'
        target_label: 'job'
      - replacement: '${INSTANCE_ID}'
        target_label: 'instance_id'
      - replacement: '${INSTANCE_IP}'
        target_label: 'instance_ip'
