services:
  loki:
    image: grafana/loki:2.9.7
    command: -config.file=/etc/loki/config.yaml
    env_file: env.monitoring
    volumes:
      - ./config/loki/config.yaml:/etc/loki/config.yaml:ro
      - ./data/loki:/var/loki
    restart: unless-stopped
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.48.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    env_file: env.monitoring
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    restart: unless-stopped
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:v1.7.0
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    env_file: env.monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro,rslave
    restart: unless-stopped
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.9.7
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    env_file: env.monitoring
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - INSTANCE_ID=${HOST_INSTANCE_ID}
      - INSTANCE_IP=${GF_SERVER_ROOT_IP}
    volumes:
      - ./config/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/promtail:/var/lib/promtail
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:10.4.0
    ports:
      - "3000:3000"
    env_file: env.monitoring
    environment:
      - GF_SERVER_ROOT_URL=https://${GF_SERVER_ROOT_IP}:8445
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./data/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - loki

  caddy:
    image: caddy:2
    ports:
      - "8005:8005"   # Grafana HTTP (proxied)
      - "8445:8445"   # Grafana HTTPS (proxied)
      - "8006:8006"   # Loki HTTP (proxied)
      - "8446:8446"   # Loki HTTPS (proxied)
      - "8007:8007"   # Prometheus HTTP (proxied)
      - "8447:8447"   # Prometheus UI HTTPS (proxied)
      - "8448:8448"   # Prometheus remote_write HTTPS (proxied)
    env_file: env.monitoring
    volumes:
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./config/caddy/certs:/etc/caddy/certs:ro
      - ./data/caddy:/data
    environment:
      - LOKI_INGEST_USER=${LOKI_INGEST_USER}
      - LOKI_INGEST_PASS_HASH=${LOKI_INGEST_PASS_HASH}
      - PROMETHEUS_USER=${PROMETHEUS_USER}
      - PROMETHEUS_PASS_HASH=${PROMETHEUS_PASS_HASH}
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - grafana
      - loki

  hub-poller:
    build: ./hub-poller
    env_file: env.monitoring
    environment:
      - HUBS_CONFIG=/etc/hubs/hubs.yml
      - POLL_INTERVAL=30s
      - REQUEST_TIMEOUT=10s
      - CONCURRENT_REQUESTS=4
    volumes:
      - ./hubs:/etc/hubs:ro
    restart: unless-stopped
    networks:
      - monitoring

  connectivity-checker:
    build: ./connectivity-checker
    env_file: env.monitoring
    environment:
      - CONNECTIVITY_CONFIG_DIR=/etc/connectivity
      - CONNECTIVITY_INVENTORY=/etc/connectivity/nodes.inventory.yml
      - CONNECTIVITY_PROFILES_DIR=/etc/connectivity/profiles
      - POLL_INTERVAL=${CONNECTIVITY_POLL_INTERVAL:-10s}
      - REQUEST_TIMEOUT=${CONNECTIVITY_REQUEST_TIMEOUT:-5s}
      - INSTANCE_ID=${HOST_INSTANCE_ID}
      - INSTANCE_ROLE=host
    volumes:
      - ./connectivity-checker/config:/etc/connectivity:ro
    command: ["python", "-m", "app.main", "--config-dir", "/etc/connectivity", "--inventory", "nodes.inventory.yml", "--instance-id", "${HOST_INSTANCE_ID}", "--instance-role", "host"]
    restart: unless-stopped
    networks:
      - monitoring

  # vesting-poller:
  #   build: ./vesting-poller
  #   environment:
  #     - VESTING_ADDRESSES_CONFIG=/etc/vesting/addresses.yml
  #     - VESTING_POLL_INTERVAL=60s
  #     - VESTING_REQUEST_TIMEOUT=15s
  #     - INFERENCED_BIN=/usr/local/bin/inferenced
  #     - CHAIN_RPC_NODE=http://node1.gonka.ai:8000/chain-rpc/
  #   volumes:
  #     - ./vesting:/etc/vesting:ro
  #     - ./bin/inferenced:/usr/local/bin/inferenced:ro
  #   restart: unless-stopped
  #   networks:
  #     - monitoring

networks:
  monitoring:
    driver: bridge

